#-------------------------------------------------------------------------------------------------------
#
library(readr)
setwd("/Users/spusar877/Documents/Business Analytics/Assignment/TestJune/Set5/")
dataEDADF <- read_csv("Data_005.csv")
View(dataEDADF) #50683
#-------------------------------------------------------------------------------------------------------
#3)	Remove the ID column and load the data into another data frame
#-------------------------------------------------------------------------------------------------------
dataDF <- dataEDADF[,c(2,3,4)]
dataDF
#-------------------------------------------------------------------------------------------------------
#4)	Delete the original Data Frame
#-------------------------------------------------------------------------------------------------------
remove(dataEDADF)
dataDF %>%
count(Attribute)
library(dplyr)
dataDF %>%
count(Attribute)
attributeCount <- dataDF %>%
count(Attribute) %>%
rename(attCount = n)
#Remove rows which has Value = I/O TimeOut, Data Lost and No Signal
#
dataDF <- filter(dataDF, Value != 'I/O TimeOut')
dataDF <- filter(dataDF, Value != 'No Signal')
dataDF <- filter(dataDF, Value != 'Data Lost')
nrow(is.null(dataDF$Value))
map(dataDF, ~sum(is.na(.)))
#Remove rows which has Value = I/O TimeOut, Data Lost and No Signal
#
dataDF <- filter(dataDF, Value != 'I/O TimeOut')
dataDF <- filter(dataDF, Value != 'No Signal')
dataDF <- filter(dataDF, Value != 'Data Lost')
#Total Number of Rows: 48652
#
#6)	Factor the data High, Medium, Low as 1, 2, 3
dataDF$Value[dataDF$Value == 'High'] <- '1'
dataDF$Value[dataDF$Value == 'Medium'] <- '2'
dataDF$Value[dataDF$Value == 'Low'] <- '3'
attributeCount <- dataDF %>%
count(Attribute) %>%
rename(attCount = n)
attributeCount
dataDF$hour = hour(dataDF$Date)
#-------------------------------------------------------------------------------------------------------
dataDF$Date <- strftime(dataDF$Date,"%Y-%m-%d %H:%M:%S")
#-------------------------------------------------------------------------------------------------------
#9)	Convert Date to valid Date format.  No NAs should be introduced
dataDF$Date <- parse_date_time(dataDF$Date, orders="d-my HMS")
library(tidyverse)
library(hablar)
library(lubridate)
#-------------------------------------------------------------------------------------------------------
#9)	Convert Date to valid Date format.  No NAs should be introduced
dataDF$Date <- parse_date_time(dataDF$Date, orders="d-my HMS")
typeof(dataDF$Date)
#-------------------------------------------------------------------------------------------------------
dataDF$Date <- strftime(dataDF$Date,"%Y-%m-%d %H:%M:%S")
sapply(dataDF, class)
dataDF$hour = hour(dataDF$Date)
dataDF[,list(avg=mean(hour)),by=Attribute]
aggregate(hour ~ Attribute, dataDF, mean)
View(dataDF)
aggregate(Attribute ~ hour, dataDF, mean)
aggregate(dataDF$Value~dataDF$Attribute+dataDF$hour,dataDF,mean)
dataDF
dataDF$Value
dataDF$Attribute
dataDF$hour
dataDF
mean
aggregate(dataDF$Value~dataDF$Attribute+dataDF$hour,dataDF,mean)
#-------------------------------------------------------------------------------------------------------
#13)	Which hour has the maximum “High” No2 in the data
#
dataDF %>%
filter(dataDF$Attribute == 'No2') %>%
group_by(Attribute, hour) %>%
summarise(TotalCount = n()) %>%
arrange(desc(TotalCount))
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# turn the 'e+' into plotmath format
l <- gsub("e", "%*%10^", l)
# return this as an expression
parse(text=l)
}
ggplot(dataDF, aes(x=Attribute, y=Value, fill=hour)) + geom_bar(stat='identity') + scale_y_continuous(labels=fancy_scientific)
dataDF %>%
group_by(Attribute, hour) %>%
summarise(TotalCount = n()) %>%
arrange(desc(TotalCount))
#dataDF[,list(avg=mean(hour)),by=Attribute]
aggregate(hour ~ Attribute+Value, dataDF, mean)
#-------------------------------------------------------------------------------------------------------
#13)	Which hour has the maximum “High” No2 in the data
#
dataDF %>%
filter(dataDF$Attribute == 'No2') %>%
group_by(Attribute, hour) %>%
summarise(TotalCount = n()) %>%
arrange(desc(TotalCount))
dataDF %>%
group_by(hour, Attribute) %>%
tally() %>%
ungroup() %>%
arrange(desc(Attribute)) %>%
group_by(hour) %>%
mutate(pos = cumsum(n) - n/2) %>%
ggplot() +
geom_bar(aes(x=hour, y=n, fill = Attribute),stat = "identity") +
geom_text(aes(x=hour, y=pos, label = prettyNum(n,big.mark = ",")), vjust = 0,  size = 2) +
scale_y_continuous(labels = scales::comma) +
theme_bw() +
labs(title="Attribute (per hour)", x="Hour", y = "Total Count", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="black"),
axis.title.x = element_text(colour = "red"))
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# turn the 'e+' into plotmath format
l <- gsub("e", "%*%10^", l)
# return this as an expression
parse(text=l)
}
ggplot(dataDF, aes(x=Attribute, y=Value, fill=hour)) + geom_bar(stat='identity') + scale_y_continuous(labels=fancy_scientific)
ggplot(dataDF, aes(x=Attribute, y=Value)) +
geom_bar()
ggplot(dataDF, aes(x=Attribute, y=Value))
ggplot(dataDF, aes(x=Attribute, y=Value)) +
geom_bar()
ggplot(dataDF, aes(x=Attribute, y=Value)) +
geom_bar(stat='identity')
ggplot(dataDF, aes(x=Attribute, y=Value)) +
geom_bar(stat='identity') +
scale_y_continuous(labels=fancy_scientific)
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# turn the 'e+' into plotmath format
l <- gsub("e", "%*%10^", l)
# return this as an expression
parse(text=l)
}
ggplot(dataDF, aes(x=Attribute, y=Value)) +
geom_bar(stat='identity') +
scale_y_continuous(labels=fancy_scientific)
ggplot(dataDF, aes(x=Attribute, y=Value)) +
geom_bar(stat='identity') +
scale_x_discrete(labels=fancy_scientific)
ggplot(dataDF, aes(x=Attribute, y=Value)) +
geom_bar(stat="identity")
ggplot(dataDF, aes(x=Attribute, y=Value), fill = hour) +
geom_bar(stat="identity")
ggplot(dataDF, aes(x=Attribute, y=Value), fill = hour) +
geom_bar(stat="identity")
ggplot(dataDF, aes(x=Attribute, y=Value), fill = hour) +
geom_bar(stat="identity")
#Loading the CSV
setwd("/Users/spusar877/Documents/Business Analytics/Assignment/TestJune/Set5/")
CreditCardDF <- read_csv("CreditCardDefault_Classification.csv")
# Checking various data and cleanup
#1. Check for Null and less than 0 values
apply(is.na(CreditCardDF), 2, which)
sum(is.na(CreditCardDF))
CreditCardDF$age <- floor(CreditCardDF$age)
CreditCardDF %>% distinct(distinct_values = age)
ageCount <- CreditCardDF %>%
count(age) %>%
rename(age_count = n)
ageCount
CreditCardDF <- filter(CreditCardDF, age != -10)
CreditCardDF %>% distinct(distinct_values = age)
#Renaming of Number of Contracts
CreditCardDF$NumberOfContacts <- CreditCardDF$`No Of Contats`
CreditCardDF <- filter(CreditCardDF, designation_id != 0)
fancy_scientific <- function(l) {
# turn in to character string in scientific notation
l <- format(l, scientific = TRUE)
# quote the part before the exponent to keep all the digits
l <- gsub("^(.*)e", "'\\1'e", l)
# turn the 'e+' into plotmath format
l <- gsub("e", "%*%10^", l)
# return this as an expression
parse(text=l)
}
#-------------------------------------------------------------------------------------------------------
#1. Relationship between Age and Facebook status: To understsnd which age group has more active in facebook
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(y=facebook_status, x=age)) +
geom_bar(position="stack", stat="identity") +
labs(title = "Age Vs Facebook Status", x="Age", y = "Facebook Status", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#2. Relationship between Age and Linkedin Status: To understsnd which age group has more active in linked
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(y=linkedin_status, x=age)) +
geom_bar(position="stack", stat="identity") +
labs(title = "Age Vs Linkedin Status", x="Age", y = "Linkedin Status", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#3. Relationship between Age and Monthly Salary: To show which age group is getting higher overall salary
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(y=monthly_salary, x=age)) +
geom_bar(position="stack", stat="identity") +
labs(title = "Age Vs Monthly Salary", x="Age", y = "Monthly Salary", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#4. Relationship between Age and Number of Contacts: To understand which age group has more number of contacts
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x=age, y=CreditCardDF$NumberOfContacts)) +
geom_bar(position="stack", stat="identity") +
labs(title = "Age Vs Number of Contacts", x="Age", y = "Number of Contacts", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#5. Relationship of Defaulter flag with Loan Purpose: To understand more on which loan types has dafaulter
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x=Purpose_Loan, y=def_flag)) +
geom_bar(position="stack", stat="identity") +
labs(title = "Loan Purpose Vs Defaulter Flag", x="Loan Purpose", y = "Number of Dafaluter", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#6. Relationship between Age and Bill Amount: To understand spread of Age with Billing Amount (may be more consumption)
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x=age, y=bill_amount)) +
geom_bar(position="stack", stat="identity") +
labs(title = "Age Vs Total Bill Amount", x="Age", y = "Bill Amount", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red")) +
scale_y_continuous(labels=fancy_scientific)
#-------------------------------------------------------------------------------------------------------
#7. Grouping of Education ID
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x = education_type_id)) +
geom_bar() +
geom_text(stat = "count", aes(label = stat(count)), vjust = -1) +
theme(legend.position = "top") +
labs(title = "Education ID (In Numbers)", x="Education Type", y = "Total Count", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#8. Grouping of Loan Purpose
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x = Purpose_Loan)) +
geom_bar() +
geom_text(stat = "count", aes(label = stat(count)), vjust = -1) +
theme(legend.position = "top") +
labs(title = "Loan Purpose(In Numbers)", x="Loan Purpose", y = "Total Count", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#9. Grouping of Facebook Status
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x = facebook_status)) +
geom_bar() +
geom_text(stat = "count", aes(label = stat(count)), vjust = -1) +
theme(legend.position = "top") +
labs(title = "Facebook Status (In Numbers)", x="Facebook Type", y = "Total Count", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#10. Grouping of Linkedin Status
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x = linkedin_status)) +
geom_bar() +
geom_text(stat = "count", aes(label = stat(count)), vjust = -1) +
theme(legend.position = "top") +
labs(title = "Linkedin Status (In Numbers)", x="LinkedIn Type", y = "Total Count", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#11. Grouping of Designation ID
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x = designation_id)) +
geom_bar(aes(fill = factor(designation_id))) +
geom_text(stat = "count", aes(label = stat(count)), vjust = -1) +
theme(legend.position = "top") +
labs(title = "Designation ID (In Numbers)", x="Designation Id", y = "Total Count", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red")) +
theme(legend.position="none")
#-------------------------------------------------------------------------------------------------------
#12. Grouping of Defaulter flag
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x = def_flag)) +
geom_bar(aes(fill = factor(def_flag))) +
geom_text(stat = "count", aes(label = stat(count)), vjust = -1) +
theme(legend.position = "top") +
labs(title = "Def Flag (In Numbers)", x="Defaulter Flag", y = "Total Count", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red")) +
theme(legend.position="right")
#-------------------------------------------------------------------------------------------------------
#13. Grouping of Monthly Interest Rate
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(x = education_type_id)) +
geom_bar() +
geom_text(stat = "count", aes(label = stat(count)), vjust = -1) +
theme(legend.position = "top") +
labs(title = "Education ID (In Numbers)", x="Education Type", y = "Total Count", family="Optima") +
theme(text = element_text(color = "red", family="Optima", face="bold", size=10),
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(color="green"),
axis.title.x = element_text(colour = "red"))
#-------------------------------------------------------------------------------------------------------
#14. To understand Monthly Interest Rate with Bill Amount
#-------------------------------------------------------------------------------------------------------
ggplot(CreditCardDF, aes(Monthly_int_Rate,bill_amount, label = Monthly_int_Rate)) +
geom_bar(stat="identity") +
facet_wrap(~grouping, scales="free")
ggplot(CreditCardDF, aes(x = monthly_salary)) +
geom_boxplot()
df <- CreditCardDF %>%
group_by(Monthly_int_Rate) %>%
summarise(counts = n())
df
ggplot(df, aes(x = Monthly_int_Rate, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean()
library(expss)
library(scales)
library(ggpubr)
ggplot(df, aes(x = Monthly_int_Rate, y = counts)) +
geom_bar(fill = "#0073C2FF", stat = "identity") +
geom_text(aes(label = counts), vjust = -0.3) +
theme_pubclean()
